version: "3.9"

networks:
  internal_net:
    driver: bridge

services:
  redis:
    image: redis:7-alpine
    container_name: rag_redis_cache
    restart: unless-stopped
    networks:
      - internal_net
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server --appendonly yes
                   --maxmemory 512mb
                   --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  rag_api:
    build:
      context: ./rag
      dockerfile: Dockerfile
    container_name: rag_query_builder_api
    restart: unless-stopped
    networks:
      - internal_net
    depends_on:
      redis:
        condition: service_healthy
    environment:
      # OpenAI Configuration
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      OPENAI_MODEL: "${OPENAI_MODEL:-gpt-4-turbo-preview}"
      OPENAI_EMBED_MODEL: "${OPENAI_EMBED_MODEL:-text-embedding-3-small}"

      # Application Configuration
      CORPUS_DIR: "/app/corpus"
      TOP_K: "6"
      CHUNK_SIZE: "2000"
      TIMEOUT_SECONDS: "180"

      # ChromaDB Configuration
      CHROMA_PERSIST_DIR: "/app/chroma"
      CHROMA_COLLECTION: "querybuilder_docs"

      # Cache Configuration
      CACHE_ENABLED: "true"
      CACHE_TYPE: "redis"
      REDIS_URL: "redis://redis:6379/0"

      # Database connection (disponibiliza para API)
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
    volumes:
      - ./rag/corpus:/app/corpus:rw
      - chroma_data:/app/chroma
      # o app.py sobrescreve o container ‚Äî √∫til p/ dev; para prod, remova:
      - ./rag/app.py:/app/app.py:ro
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8081/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  postgres:
    image: postgres:15
    container_name: godlevel-db
    restart: unless-stopped
    networks:
      - internal_net
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data-generator/database-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  data-generator:
    build:
      context: ./data-generator
      dockerfile: Dockerfile
    container_name: godlevel-data-gen
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal_net
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
    command: >
      sh -c "
        echo '‚è≥ Waiting for database to be ready...' &&
        sleep 5 &&
        echo 'üöÄ Generating sample data...' &&
        python generate_data.py --db-url postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      "
    profiles:
      - tools

  # =========================
  # Minimal API (.NET 8) p/ relat√≥rios
  # =========================
  reports_api:
    build:
      context: ./report-builder/api   # Certifique-se de ter o Dockerfile e o projeto .NET aqui
      dockerfile: Dockerfile
    image: reports-api:latest
    container_name: reports_api
    restart: unless-stopped
    networks:
      - internal_net
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      ASPNETCORE_URLS: "http://+:8080"
      GRAFANA_URL: "http://grafana:3000"
      GRAFANA_API_KEY: "${GRAFANA_API_KEY}"
      # Mantemos compat√≠vel com a Program.cs lendo ConnectionStrings__Default
      ConnectionStrings__Default: "Host=postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s

  # =========================
  # Grafana + provisionamento Postgres
  # =========================
  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    restart: unless-stopped
    networks:
      - internal_net
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "admin"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./report-builder/grafana/provisioning:/etc/grafana/provisioning:ro

volumes:
  chroma_data:
  redis_data:
  postgres_data:
    driver: local
  grafana-storage: